Procedure	sql_mode	Create Procedure	character_set_client	collation_connection	Database Collation
f_auto_billing_complete_initialize	STRICT_TRANS_TABLES	CREATE DEFINER=`data_warehouse`@`172.16.63.%` PROCEDURE `f_auto_billing_complete_initialize`()\n    COMMENT 'USAGE:  f_auto_billing_complete_initialize /* initialize f_auto_billing_complete_2 with account_ids */'\nBEGIN\n  \n    DECLARE last_of_last_month  DATE;\n  \n    SET last_of_last_month = CONVERT(DATE_FORMAT(CURRENT_DATE, '%Y%m01'), DATE) - INTERVAL 1 DAY;\n  \n    SELECT 'f_auto_billing_complete_initialize' AS stored_procedure, 'retrieving account_id\\'s from decryptx' AS operation, '' AS remarks, CURRENT_TIMESTAMP;\n  \n    -- get list of cardconex_acct_id's originating from decryptx\n    \n    DROP TABLE IF EXISTS auto_billing_staging.tmp_device_account_id;\n    \n    CREATE TABLE auto_billing_staging.tmp_device_account_id (\n         poi_device_id VARCHAR(16)\n        ,account_id VARCHAR(18) \n        ,PRIMARY KEY(poi_device_id)\n    );\n    \n    INSERT INTO auto_billing_staging.tmp_device_account_id\n    SELECT\n        ddd.poi_device_id                                               AS poi_device_id                                    \n       ,COALESCE(ddcm.cardconex_acct_id, dcm.cardconex_acct_id)         AS account_id\n      FROM auto_billing_staging.decryptx_device_day                     ddd \n      LEFT JOIN auto_billing_staging.stg_decryptx_device_cardconex_map  ddcm ON ddd.poi_device_id = ddcm.decryptx_device_id \n      LEFT JOIN auto_billing_staging.stg_decryptx_cardconex_map         dcm  ON ddd.custodian_id  = dcm.decryptx_acct_id\n     WHERE ddd.report_date = last_of_last_month\n    ;\n    \n    -- get list of cardconex_acct_id's originating from payconex\n\n    SELECT 'f_auto_billing_complete_initialize' AS stored_procedure, 'retrieving account_id\\'s from payconex' AS operation, '' AS remarks, CURRENT_TIMESTAMP;\n      \n    DROP TABLE IF EXISTS auto_billing_staging.tmp_payconex_account_id;\n    \n    CREATE  TABLE auto_billing_staging.tmp_payconex_account_id(\n         account_id VARCHAR(18) PRIMARY KEY\n    );\n    \n    INSERT IGNORE INTO auto_billing_staging.tmp_payconex_account_id\n    SELECT pcm.cardconex_acct_id\n      FROM auto_billing_staging.stg_payconex_volume                 pvd \n      LEFT JOIN auto_billing_staging.stg_payconex_cardconex_map     pcm \n        ON pvd.acct_id = pcm.payconex_acct_id \n    ;\n    \n    -- populate f_auto_billing_complete_2\n    \n    TRUNCATE auto_billing_dw.f_auto_billing_complete_2;\n    \n    SELECT 'f_auto_billing_complete_initialize' AS stored_procedure, 'inserting account_id\\'s into auto_billing_dw.f_auto_billing_complete_2' AS operation, '' AS remarks, CURRENT_TIMESTAMP;\n  \n    INSERT IGNORE INTO auto_billing_dw.f_auto_billing_complete_2(account_id)\n    SELECT account_id\n      FROM auto_billing_staging.tmp_device_account_id\n    ;\n    \n    INSERT IGNORE INTO auto_billing_dw.f_auto_billing_complete_2(account_id)\n    SELECT account_id\n      FROM auto_billing_staging.tmp_payconex_account_id\n    ;\n      \n    DELETE FROM auto_billing_dw.f_auto_billing_complete_2 WHERE account_id IS NULL OR LENGTH(account_id) = 0;\n   \n    UPDATE auto_billing_dw.f_auto_billing_complete_2      t1\n      JOIN auto_billing_staging.tmp_device_account_id     t2 \n        ON t1.account_id = t2.account_id \n       SET t1.decryptx = 1\n     WHERE TRUE\n    ;\n    \n    UPDATE auto_billing_dw.f_auto_billing_complete_2      t1\n      JOIN auto_billing_staging.tmp_payconex_account_id   t2 \n        ON t1.account_id = t2.account_id \n       SET t1.payconex = 1\n     WHERE TRUE\n    ;\n    \n    UPDATE auto_billing_dw.f_auto_billing_complete_2\n       SET decryptx    = COALESCE(decryptx, 0)\n          ,payconex    = COALESCE(payconex, 0)\n          ,shieldconex = 0\n     WHERE TRUE \n    ;\n    \nEND	utf8	utf8_general_ci	latin1_swedish_ci
